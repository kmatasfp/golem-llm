package golem:stt@1.0.0;

interface types {
  variant stt-error {
    invalid-audio(string),
    unsupported-format(string),
    unsupported-language(string),
    transcription-failed(string),
    unauthorized(string),
    access-denied(string),
    quota-exceeded(quota-info),
    rate-limited(string),
    insufficient-credits,
    unsupported-operation(string),
    service-unavailable(string),
    network-error(string),
    internal-error(string),
  }

  record quota-info {
    used: u32,
    limit: u32,
    reset-time: u64,
    unit: quota-unit,
  }

  enum quota-unit {
    seconds,
    requests,
    credits,
  }

  type language-code = string;

  enum audio-format {
    wav,
    mp3,
    flac,
    ogg,
    aac,
    pcm,
  }

  record audio-config {
    format: audio-format,
    sample-rate: option<u32>,
    channels: option<u8>,
  }

  /// Only word-level timing is commonly supported
  enum timing-mark-type {
    word,
  }

  record timing-info {
    start-time-seconds: f32,
    end-time-seconds: f32,
    mark-type: timing-mark-type,
  }

  record word-segment {
    text: string,
    timing-info: option<timing-info>,
    confidence: option<f32>,
    speaker-id: option<string>,
  }

  record transcript-alternative {
    text: string,
    confidence: f32,
    words: list<word-segment>,
  }

  record transcription-metadata {
    duration-seconds: f32,
    audio-size-bytes: u32,
    request-id: string,
    model: option<string>,
    language: language-code,
  }

  record transcription-result {
    alternatives: list<transcript-alternative>,
    metadata: transcription-metadata,
  }
}

interface languages {
  use types.{language-code, stt-error};

  record language-info {
    code: language-code,
    name: string,
    native-name: string,
  }

  list-languages: func() -> result<list<language-info>, stt-error>;
}

interface transcription {
  use types.{
    audio-config,
    transcription-result,
    stt-error,
    language-code,
    transcript-alternative,
  };

  record phrase {
     value: string,
     boost: option<f32>
  }

  record vocabulary {
     phrases: list<phrase>
  }

  record transcribe-options {
    enable-timestamps: option<bool>,
    enable-speaker-diarization: option<bool>,
    language: option<language-code>,
    model: option<string>,
    profanity-filter: option<bool>,
    vocabulary: option<vocabulary>,
    speech-context: option<list<string>>,
    enable-word-confidence: option<bool>,
    enable-timing-detail: option<bool>,
  }

  record transcription-request {
    audio: list<u8>,
    config: audio-config,
    options: option<transcribe-options>
  }

  transcribe: func(
    request: transcription-request
  ) -> result<transcription-result, stt-error>;

  queue-transcription: func(
    requests: list<transcription-request>
  ) -> result<transcription-queue, stt-error>;

  resource transcription-queue {
    get-next: func() -> option<result<transcription-result, stt-error>>;
    blocking-get-next: func() -> list<result<transcription-result, stt-error>>;
  }
}

world stt-library {
    export types;
    export languages;
    export transcription;
}
